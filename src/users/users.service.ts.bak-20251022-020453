import { verifyPasswordGeneric } from '../auth/password-helpers';
import { Injectable } from '@nestjs/common';

import { InjectModel } from '@nestjs/mongoose';
import * as bcrypt from 'bcryptjs'
import * as argon2 from 'argon2';;

import { Model } from 'mongoose';
import * as bcrypt from 'bcryptjs'
import * as argon2 from 'argon2';;

import { User, UserDocument } from './schemas/user.schema';

@Injectable()
export class UsersService {
  constructor(@InjectModel(User.name) private readonly model: Model<UserDocument>) {}

  async createInternal(data: { name: string; email: string; password_hash: string }) {
    return this.model.create(data);
  }

  async findByEmail(email: string) {
    return this.model.findOne({ email }).select('+password +passwordHash +hashedPassword') .exec();
  }

  async findById(id: string) {
    return this.model.findById(id).exec();
  }
}

    }

}

@Injectable()
export class UsersService {
  constructor(@InjectModel(User.name) private readonly model: Model<UserDocument>) {}

  async createInternal(data: { name: string; email: string; password_hash: string }) {
    return this.model.create(data);
  }

  async findByEmail(email: string) {
    return this.model.findOne({ email }).select('+password +passwordHash +hashedPassword') .exec();
  }

  async findById(id: string) {
    return this.model.findById(id).exec();
  }
}


