import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { User, UserDocument } from './schemas/user.schema';
import * as bcrypt from 'bcryptjs';
import * as argon2 from 'argon2';

async function verifyPasswordGeneric(plain: string, hashed: string): Promise<boolean> {
  if (!hashed) return false;
  try {
    if (hashed.startsWith('\$') || hashed.startsWith('\$') || hashed.startsWith('\$')) {
      return await verifyPasswordGeneric(plain, hashed);
    }
    if (hashed.startsWith('\')) {
      return await verifyPasswordGeneric(plain, hashed);
    }
    return (await verifyPasswordGeneric(plain, hashed)) || (await verifyPasswordGeneric(plain, hashed).catch(() => false));
  } catch { return false; }
}


@Injectable()
export class UsersService {
  constructor(@InjectModel(User.name) private readonly model: Model<UserDocument>) {}

  async createInternal(data: { name: string; email: string; password_hash: string }) {
    return this.model.create(data);
  }

  async findByEmail(email: string) {
    return this.model.findOne({ email }).select('+password +passwordHash +hashedPassword') .exec();
  }

  async findById(id: string) {
    return this.model.findById(id).exec();
  }
}

