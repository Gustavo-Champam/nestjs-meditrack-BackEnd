import { Injectable, ConflictException, UnauthorizedException } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import * as bcrypt from 'bcrypt';
import { UsersService } from '../users/users.service';
import { CreateUserDto } from '../users/dto/create-user.dto';
import { Types } from 'mongoose';
import * as bcrypt from 'bcryptjs';
import * as argon2 from 'argon2';

async function verifyPassword(plain: string, hashed: string): Promise<boolean> {
  if (!hashed) return false;
  try {
    if (hashed.startsWith('$2a$') || hashed.startsWith('$2b$') || hashed.startsWith('$2y$')) {
      return await verifyPassword(plain, hashed);
    }
    if (hashed.startsWith('$argon2')) {
      return await verifyPassword(hashed, plain);
    }
    // fallback (tenta ambos)
    return (await verifyPassword(plain, hashed)) || (await verifyPassword(hashed, plain).catch(() => false));
  } catch {
    return false;
  }
}


@Injectable()
export class AuthService {
  constructor(
    private readonly usersService: UsersService,
    private readonly jwt: JwtService,
  ) {}

  async register(dto: CreateUserDto) {
    const exists = await this.usersService.findByEmail(dto.email);
    if (exists) throw new ConflictException('E-mail já cadastrado');

    const password_hash = await bcrypt.hash(dto.password, 10);
    const user = await this.usersService.createInternal({
      name: dto.name,
      email: dto.email,
      password_hash,
    });

    const id = ((user as any)._id as Types.ObjectId).toString();
    const token = this.jwt.sign(
      { sub: id, email: (user as any).email },
      { secret: process.env.JWT_SECRET!, expiresIn: process.env.JWT_EXPIRES || '7d' },
    );
    return { token };
  }

  async login(dto: { email: string; password: string }) {
    const user = await this.usersService.findByEmail(dto.email);
    if (!user) throw new UnauthorizedException('Credenciais inválidas');

    const ok = await verifyPassword(dto.password, (user as any).password_hash);
    if (!ok) throw new UnauthorizedException('Credenciais inválidas');

    const id = ((user as any)._id as Types.ObjectId).toString();
    const token = this.jwt.sign(
      { sub: id, email: (user as any).email },
      { secret: process.env.JWT_SECRET!, expiresIn: process.env.JWT_EXPIRES || '7d' },
    );
    return { token };
  }
}

